<!-- This XML file describes the interface of the python operator. It defines the required source product(s) and the parameters
     for the processing. By using the information of this file the graphical user interface is automatically generated and also
     the help on the command line is derived from the information provided here.
-->
<operator>
    <!-- The name uniquely identifies the operator within SNAP -->
    <name>org.esa.snap.python.S2RutOp</name>
    <!-- The alias is a more user-friendly name, e.g. to be used on the command line -->
    <alias>S2RutOp</alias>
    <operatorClass>org.esa.snap.snappy.gpf.PyOperator</operatorClass>

    <version>2.0</version>
    <authors>Javier Gorrono, Norman Fomferra and Marco Peters</authors>
    <copyright>2015-2016 by National Physical Laboratory and Brockmann Consult GmbH</copyright>

    <description>Radiometric uncertainty tool for Sentinel-2 MSI L1C products.</description>

    <namedSourceProducts>
        <!-- One or more source products can be specified.
             In the GUI only one is currently supported. On the command line multiple source products
             can be specified by referencing them with the here defined names.
         -->
        <sourceProduct>
            <name>source</name>
        </sourceProduct>
    </namedSourceProducts>

    <parameters>
        <parameter>
            <!-- The name of the parameter; use context.getParameter('coverage_factor') in your Python code to retrieve the value -->
            <name>coverage_factor</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>The value of the coverage factor for the uncertainty evaluation (<i>k</i>=1 means 68.27% probability)</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>double</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>1.0</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; use context.getParameter('band_names') in your Python code to retrieve the value -->
            <name>band_names</name>
            <!-- The label is shown in the GUI -->
            <label>Band names</label>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>The bands for which the uncertainty shall be computed</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>String[]</dataType>
            <defaultValue>B1,B2,B3,B4,B5,B6,B7,B8,B8A,B9,B10,B11,B12</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Instrument_noise</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Noise (shot, thermal, etc.) introduced by the silicon and CMT detectors of the MSI instrument</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>OOF_straylight-systematic</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Telescope Out-Of-Field light that results in a positive bias</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>OOF_straylight-random</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Focal plane Out-Of-Field light that results in a random spatial dispersion</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Crosstalk</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Focal plane (Optical) and Front-End Electronics (electrical) inter-band signal</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>ADC_quantisation</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Analog to Digital conversion at the Video Chain Unit on-board the MSI</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>DS_stability</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Residual thermal fluctuations of the detector offset along the orbit</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Gamma_knowledge</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Knowledge on te correction for non-linearity and non-uniformity</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Diffuser-absolute_knowledge</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Knowledge on the diffuser reflectance factor (BRF) </description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Diffuser-temporal_knowledge</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Estimated effect of the diffuser degradation in space</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Diffuser-cosine_effect</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Cosine correction knowledge as a consequence of angular noise</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Diffuser-straylight_residual</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Residual for the correction of the stray-light during in-flight diffuser calibration</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>L1C_image_quantisation</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Effect of the finite resolution of the L1C reflectance factor</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
    </parameters>

</operator>